// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	model "github.com/rl404/go-malscraper/model"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetAnime provides a mock function with given fields: id
func (_m *API) GetAnime(id int) (*model.Anime, int, error) {
	ret := _m.Called(id)

	var r0 *model.Anime
	if rf, ok := ret.Get(0).(func(int) *model.Anime); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Anime)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeArticle provides a mock function with given fields: id
func (_m *API) GetAnimeArticle(id int) ([]model.ArticleItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ArticleItem
	if rf, ok := ret.Get(0).(func(int) []model.ArticleItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeCharacter provides a mock function with given fields: id
func (_m *API) GetAnimeCharacter(id int) ([]model.CharacterItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.CharacterItem
	if rf, ok := ret.Get(0).(func(int) []model.CharacterItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CharacterItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeClub provides a mock function with given fields: id
func (_m *API) GetAnimeClub(id int) ([]model.ClubItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ClubItem
	if rf, ok := ret.Get(0).(func(int) []model.ClubItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeEpisode provides a mock function with given fields: id, page
func (_m *API) GetAnimeEpisode(id int, page int) ([]model.Episode, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.Episode
	if rf, ok := ret.Get(0).(func(int, int) []model.Episode); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Episode)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeMoreInfo provides a mock function with given fields: id
func (_m *API) GetAnimeMoreInfo(id int) (string, int, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeNews provides a mock function with given fields: id
func (_m *API) GetAnimeNews(id int) ([]model.NewsItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.NewsItem
	if rf, ok := ret.Get(0).(func(int) []model.NewsItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.NewsItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimePicture provides a mock function with given fields: id
func (_m *API) GetAnimePicture(id int) ([]string, int, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeRecommendation provides a mock function with given fields: id
func (_m *API) GetAnimeRecommendation(id int) ([]model.Recommendation, int, error) {
	ret := _m.Called(id)

	var r0 []model.Recommendation
	if rf, ok := ret.Get(0).(func(int) []model.Recommendation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recommendation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeReview provides a mock function with given fields: id, page
func (_m *API) GetAnimeReview(id int, page int) ([]model.Review, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.Review
	if rf, ok := ret.Get(0).(func(int, int) []model.Review); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeStaff provides a mock function with given fields: id
func (_m *API) GetAnimeStaff(id int) ([]model.Role, int, error) {
	ret := _m.Called(id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int) []model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeStats provides a mock function with given fields: id
func (_m *API) GetAnimeStats(id int) (*model.Stats, int, error) {
	ret := _m.Called(id)

	var r0 *model.Stats
	if rf, ok := ret.Get(0).(func(int) *model.Stats); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stats)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeVideo provides a mock function with given fields: id, page
func (_m *API) GetAnimeVideo(id int, page int) (*model.Video, int, error) {
	ret := _m.Called(id, page)

	var r0 *model.Video
	if rf, ok := ret.Get(0).(func(int, int) *model.Video); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Video)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAnimeWithGenre provides a mock function with given fields: id, page
func (_m *API) GetAnimeWithGenre(id int, page int) ([]model.AnimeItem, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.AnimeItem
	if rf, ok := ret.Get(0).(func(int, int) []model.AnimeItem); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AnimeItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticle provides a mock function with given fields: id
func (_m *API) GetArticle(id int) (*model.Article, int, error) {
	ret := _m.Called(id)

	var r0 *model.Article
	if rf, ok := ret.Get(0).(func(int) *model.Article); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Article)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticleTag provides a mock function with given fields:
func (_m *API) GetArticleTag() ([]model.ArticleTagItem, int, error) {
	ret := _m.Called()

	var r0 []model.ArticleTagItem
	if rf, ok := ret.Get(0).(func() []model.ArticleTagItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleTagItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticles provides a mock function with given fields: page, tag
func (_m *API) GetArticles(page int, tag string) ([]model.ArticleItem, int, error) {
	ret := _m.Called(page, tag)

	var r0 []model.ArticleItem
	if rf, ok := ret.Get(0).(func(int, string) []model.ArticleItem); ok {
		r0 = rf(page, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, string) int); ok {
		r1 = rf(page, tag)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(page, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacter provides a mock function with given fields: id
func (_m *API) GetCharacter(id int) (*model.Character, int, error) {
	ret := _m.Called(id)

	var r0 *model.Character
	if rf, ok := ret.Get(0).(func(int) *model.Character); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Character)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacterArticle provides a mock function with given fields: id
func (_m *API) GetCharacterArticle(id int) ([]model.ArticleItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ArticleItem
	if rf, ok := ret.Get(0).(func(int) []model.ArticleItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacterClub provides a mock function with given fields: id
func (_m *API) GetCharacterClub(id int) ([]model.ClubItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ClubItem
	if rf, ok := ret.Get(0).(func(int) []model.ClubItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacterOgraphy provides a mock function with given fields: _type, id
func (_m *API) GetCharacterOgraphy(_type string, id int) ([]model.Role, int, error) {
	ret := _m.Called(_type, id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(string, int) []model.Role); ok {
		r0 = rf(_type, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(_type, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(_type, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacterPicture provides a mock function with given fields: id
func (_m *API) GetCharacterPicture(id int) ([]string, int, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCharacterVA provides a mock function with given fields: id
func (_m *API) GetCharacterVA(id int) ([]model.Role, int, error) {
	ret := _m.Called(id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int) []model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClub provides a mock function with given fields: id
func (_m *API) GetClub(id int) (*model.Club, int, error) {
	ret := _m.Called(id)

	var r0 *model.Club
	if rf, ok := ret.Get(0).(func(int) *model.Club); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Club)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClubMember provides a mock function with given fields: id, page
func (_m *API) GetClubMember(id int, page int) ([]model.ClubMember, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.ClubMember
	if rf, ok := ret.Get(0).(func(int, int) []model.ClubMember); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubMember)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClubPicture provides a mock function with given fields: id
func (_m *API) GetClubPicture(id int) ([]string, int, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClubRelated provides a mock function with given fields: id
func (_m *API) GetClubRelated(id int) (*model.ClubRelated, int, error) {
	ret := _m.Called(id)

	var r0 *model.ClubRelated
	if rf, ok := ret.Get(0).(func(int) *model.ClubRelated); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClubRelated)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClubs provides a mock function with given fields: page
func (_m *API) GetClubs(page int) ([]model.ClubSearch, int, error) {
	ret := _m.Called(page)

	var r0 []model.ClubSearch
	if rf, ok := ret.Get(0).(func(int) []model.ClubSearch); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGenres provides a mock function with given fields: _type
func (_m *API) GetGenres(_type string) ([]model.ItemCount, int, error) {
	ret := _m.Called(_type)

	var r0 []model.ItemCount
	if rf, ok := ret.Get(0).(func(string) []model.ItemCount); ok {
		r0 = rf(_type)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemCount)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(_type)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_type)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMagazine provides a mock function with given fields: id, page
func (_m *API) GetMagazine(id int, page int) ([]model.MangaItem, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.MangaItem
	if rf, ok := ret.Get(0).(func(int, int) []model.MangaItem); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MangaItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMagazines provides a mock function with given fields:
func (_m *API) GetMagazines() ([]model.ItemCount, int, error) {
	ret := _m.Called()

	var r0 []model.ItemCount
	if rf, ok := ret.Get(0).(func() []model.ItemCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemCount)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetManga provides a mock function with given fields: id
func (_m *API) GetManga(id int) (*model.Manga, int, error) {
	ret := _m.Called(id)

	var r0 *model.Manga
	if rf, ok := ret.Get(0).(func(int) *model.Manga); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Manga)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaArticle provides a mock function with given fields: id
func (_m *API) GetMangaArticle(id int) ([]model.ArticleItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ArticleItem
	if rf, ok := ret.Get(0).(func(int) []model.ArticleItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaCharacter provides a mock function with given fields: id
func (_m *API) GetMangaCharacter(id int) ([]model.Role, int, error) {
	ret := _m.Called(id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int) []model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaClub provides a mock function with given fields: id
func (_m *API) GetMangaClub(id int) ([]model.ClubItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ClubItem
	if rf, ok := ret.Get(0).(func(int) []model.ClubItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaMoreInfo provides a mock function with given fields: id
func (_m *API) GetMangaMoreInfo(id int) (string, int, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaNews provides a mock function with given fields: id
func (_m *API) GetMangaNews(id int) ([]model.NewsItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.NewsItem
	if rf, ok := ret.Get(0).(func(int) []model.NewsItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.NewsItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaPicture provides a mock function with given fields: id
func (_m *API) GetMangaPicture(id int) ([]string, int, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaRecommendation provides a mock function with given fields: id
func (_m *API) GetMangaRecommendation(id int) ([]model.Recommendation, int, error) {
	ret := _m.Called(id)

	var r0 []model.Recommendation
	if rf, ok := ret.Get(0).(func(int) []model.Recommendation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recommendation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaReview provides a mock function with given fields: id, page
func (_m *API) GetMangaReview(id int, page int) ([]model.Review, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.Review
	if rf, ok := ret.Get(0).(func(int, int) []model.Review); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaStats provides a mock function with given fields: id
func (_m *API) GetMangaStats(id int) (*model.Stats, int, error) {
	ret := _m.Called(id)

	var r0 *model.Stats
	if rf, ok := ret.Get(0).(func(int) *model.Stats); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stats)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMangaWithGenre provides a mock function with given fields: id, page
func (_m *API) GetMangaWithGenre(id int, page int) ([]model.MangaItem, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.MangaItem
	if rf, ok := ret.Get(0).(func(int, int) []model.MangaItem); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MangaItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNews provides a mock function with given fields: id
func (_m *API) GetNews(id int) (*model.News, int, error) {
	ret := _m.Called(id)

	var r0 *model.News
	if rf, ok := ret.Get(0).(func(int) *model.News); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNewsList provides a mock function with given fields: page, tag
func (_m *API) GetNewsList(page int, tag string) ([]model.NewsItem, int, error) {
	ret := _m.Called(page, tag)

	var r0 []model.NewsItem
	if rf, ok := ret.Get(0).(func(int, string) []model.NewsItem); ok {
		r0 = rf(page, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.NewsItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, string) int); ok {
		r1 = rf(page, tag)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(page, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNewsTag provides a mock function with given fields:
func (_m *API) GetNewsTag() (*model.NewsTag, int, error) {
	ret := _m.Called()

	var r0 *model.NewsTag
	if rf, ok := ret.Get(0).(func() *model.NewsTag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewsTag)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeople provides a mock function with given fields: id
func (_m *API) GetPeople(id int) (*model.People, int, error) {
	ret := _m.Called(id)

	var r0 *model.People
	if rf, ok := ret.Get(0).(func(int) *model.People); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.People)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeopleArticle provides a mock function with given fields: id
func (_m *API) GetPeopleArticle(id int) ([]model.ArticleItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.ArticleItem
	if rf, ok := ret.Get(0).(func(int) []model.ArticleItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeopleCharacter provides a mock function with given fields: id
func (_m *API) GetPeopleCharacter(id int) ([]model.PeopleCharacter, int, error) {
	ret := _m.Called(id)

	var r0 []model.PeopleCharacter
	if rf, ok := ret.Get(0).(func(int) []model.PeopleCharacter); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PeopleCharacter)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeopleManga provides a mock function with given fields: id
func (_m *API) GetPeopleManga(id int) ([]model.Role, int, error) {
	ret := _m.Called(id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int) []model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeopleNews provides a mock function with given fields: id
func (_m *API) GetPeopleNews(id int) ([]model.NewsItem, int, error) {
	ret := _m.Called(id)

	var r0 []model.NewsItem
	if rf, ok := ret.Get(0).(func(int) []model.NewsItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.NewsItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeoplePicture provides a mock function with given fields: id
func (_m *API) GetPeoplePicture(id int) ([]string, int, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPeopleStaff provides a mock function with given fields: id
func (_m *API) GetPeopleStaff(id int) ([]model.Role, int, error) {
	ret := _m.Called(id)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int) []model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProducer provides a mock function with given fields: id, page
func (_m *API) GetProducer(id int, page int) ([]model.AnimeItem, int, error) {
	ret := _m.Called(id, page)

	var r0 []model.AnimeItem
	if rf, ok := ret.Get(0).(func(int, int) []model.AnimeItem); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AnimeItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(id, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProducers provides a mock function with given fields:
func (_m *API) GetProducers() ([]model.ItemCount, int, error) {
	ret := _m.Called()

	var r0 []model.ItemCount
	if rf, ok := ret.Get(0).(func() []model.ItemCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemCount)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecommendation provides a mock function with given fields: _type, id1, id2
func (_m *API) GetRecommendation(_type string, id1 int, id2 int) (*model.Recommendation, int, error) {
	ret := _m.Called(_type, id1, id2)

	var r0 *model.Recommendation
	if rf, ok := ret.Get(0).(func(string, int, int) *model.Recommendation); ok {
		r0 = rf(_type, id1, id2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recommendation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(_type, id1, id2)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(_type, id1, id2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecommendations provides a mock function with given fields: _type, page
func (_m *API) GetRecommendations(_type string, page int) ([]model.Recommendation, int, error) {
	ret := _m.Called(_type, page)

	var r0 []model.Recommendation
	if rf, ok := ret.Get(0).(func(string, int) []model.Recommendation); ok {
		r0 = rf(_type, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recommendation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(_type, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(_type, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReview provides a mock function with given fields: id
func (_m *API) GetReview(id int) (*model.Review, int, error) {
	ret := _m.Called(id)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(int) *model.Review); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReviews provides a mock function with given fields: _type, page
func (_m *API) GetReviews(_type string, page int) ([]model.Review, int, error) {
	ret := _m.Called(_type, page)

	var r0 []model.Review
	if rf, ok := ret.Get(0).(func(string, int) []model.Review); ok {
		r0 = rf(_type, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(_type, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(_type, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSeason provides a mock function with given fields: season, year
func (_m *API) GetSeason(season string, year int) ([]model.AnimeItem, int, error) {
	ret := _m.Called(season, year)

	var r0 []model.AnimeItem
	if rf, ok := ret.Get(0).(func(string, int) []model.AnimeItem); ok {
		r0 = rf(season, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AnimeItem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(season, year)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(season, year)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopAnime provides a mock function with given fields: _type, page
func (_m *API) GetTopAnime(_type int, page int) ([]model.TopAnime, int, error) {
	ret := _m.Called(_type, page)

	var r0 []model.TopAnime
	if rf, ok := ret.Get(0).(func(int, int) []model.TopAnime); ok {
		r0 = rf(_type, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TopAnime)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(_type, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(_type, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopCharacter provides a mock function with given fields: page
func (_m *API) GetTopCharacter(page int) ([]model.TopCharacter, int, error) {
	ret := _m.Called(page)

	var r0 []model.TopCharacter
	if rf, ok := ret.Get(0).(func(int) []model.TopCharacter); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TopCharacter)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopManga provides a mock function with given fields: _type, page
func (_m *API) GetTopManga(_type int, page int) ([]model.TopManga, int, error) {
	ret := _m.Called(_type, page)

	var r0 []model.TopManga
	if rf, ok := ret.Get(0).(func(int, int) []model.TopManga); ok {
		r0 = rf(_type, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TopManga)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(_type, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(_type, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopPeople provides a mock function with given fields: page
func (_m *API) GetTopPeople(page int) ([]model.TopPeople, int, error) {
	ret := _m.Called(page)

	var r0 []model.TopPeople
	if rf, ok := ret.Get(0).(func(int) []model.TopPeople); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TopPeople)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: username
func (_m *API) GetUser(username string) (*model.User, int, error) {
	ret := _m.Called(username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserAnime provides a mock function with given fields: query
func (_m *API) GetUserAnime(query model.UserListQuery) ([]model.UserAnime, int, error) {
	ret := _m.Called(query)

	var r0 []model.UserAnime
	if rf, ok := ret.Get(0).(func(model.UserListQuery) []model.UserAnime); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserAnime)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.UserListQuery) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.UserListQuery) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserClub provides a mock function with given fields: username
func (_m *API) GetUserClub(username string) ([]model.Item, int, error) {
	ret := _m.Called(username)

	var r0 []model.Item
	if rf, ok := ret.Get(0).(func(string) []model.Item); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserFavorite provides a mock function with given fields: username
func (_m *API) GetUserFavorite(username string) (*model.UserFavorite, int, error) {
	ret := _m.Called(username)

	var r0 *model.UserFavorite
	if rf, ok := ret.Get(0).(func(string) *model.UserFavorite); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserFavorite)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserFriend provides a mock function with given fields: username, page
func (_m *API) GetUserFriend(username string, page int) ([]model.UserFriend, int, error) {
	ret := _m.Called(username, page)

	var r0 []model.UserFriend
	if rf, ok := ret.Get(0).(func(string, int) []model.UserFriend); ok {
		r0 = rf(username, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserFriend)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(username, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(username, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserHistory provides a mock function with given fields: username, _type
func (_m *API) GetUserHistory(username string, _type string) ([]model.UserHistory, int, error) {
	ret := _m.Called(username, _type)

	var r0 []model.UserHistory
	if rf, ok := ret.Get(0).(func(string, string) []model.UserHistory); ok {
		r0 = rf(username, _type)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserHistory)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(username, _type)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(username, _type)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserManga provides a mock function with given fields: query
func (_m *API) GetUserManga(query model.UserListQuery) ([]model.UserManga, int, error) {
	ret := _m.Called(query)

	var r0 []model.UserManga
	if rf, ok := ret.Get(0).(func(model.UserListQuery) []model.UserManga); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserManga)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.UserListQuery) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.UserListQuery) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserRecommendation provides a mock function with given fields: username, page
func (_m *API) GetUserRecommendation(username string, page int) ([]model.Recommendation, int, error) {
	ret := _m.Called(username, page)

	var r0 []model.Recommendation
	if rf, ok := ret.Get(0).(func(string, int) []model.Recommendation); ok {
		r0 = rf(username, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recommendation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(username, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(username, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserReview provides a mock function with given fields: username, page
func (_m *API) GetUserReview(username string, page int) ([]model.Review, int, error) {
	ret := _m.Called(username, page)

	var r0 []model.Review
	if rf, ok := ret.Get(0).(func(string, int) []model.Review); ok {
		r0 = rf(username, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(username, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(username, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserStats provides a mock function with given fields: username
func (_m *API) GetUserStats(username string) (*model.UserStats, int, error) {
	ret := _m.Called(username)

	var r0 *model.UserStats
	if rf, ok := ret.Get(0).(func(string) *model.UserStats); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserStats)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchAnime provides a mock function with given fields: query
func (_m *API) SearchAnime(query model.Query) ([]model.AnimeSearch, int, error) {
	ret := _m.Called(query)

	var r0 []model.AnimeSearch
	if rf, ok := ret.Get(0).(func(model.Query) []model.AnimeSearch); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AnimeSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.Query) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.Query) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchCharacter provides a mock function with given fields: query, page
func (_m *API) SearchCharacter(query string, page int) ([]model.CharacterSearch, int, error) {
	ret := _m.Called(query, page)

	var r0 []model.CharacterSearch
	if rf, ok := ret.Get(0).(func(string, int) []model.CharacterSearch); ok {
		r0 = rf(query, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CharacterSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(query, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(query, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchClub provides a mock function with given fields: query
func (_m *API) SearchClub(query model.ClubQuery) ([]model.ClubSearch, int, error) {
	ret := _m.Called(query)

	var r0 []model.ClubSearch
	if rf, ok := ret.Get(0).(func(model.ClubQuery) []model.ClubSearch); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ClubSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.ClubQuery) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.ClubQuery) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchManga provides a mock function with given fields: query
func (_m *API) SearchManga(query model.Query) ([]model.MangaSearch, int, error) {
	ret := _m.Called(query)

	var r0 []model.MangaSearch
	if rf, ok := ret.Get(0).(func(model.Query) []model.MangaSearch); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MangaSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.Query) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.Query) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchPeople provides a mock function with given fields: query, page
func (_m *API) SearchPeople(query string, page int) ([]model.PeopleSearch, int, error) {
	ret := _m.Called(query, page)

	var r0 []model.PeopleSearch
	if rf, ok := ret.Get(0).(func(string, int) []model.PeopleSearch); ok {
		r0 = rf(query, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PeopleSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(query, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(query, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchUser provides a mock function with given fields: query
func (_m *API) SearchUser(query model.UserQuery) ([]model.UserSearch, int, error) {
	ret := _m.Called(query)

	var r0 []model.UserSearch
	if rf, ok := ret.Get(0).(func(model.UserQuery) []model.UserSearch); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.UserQuery) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.UserQuery) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
